// <auto-generated />
using System;
using LiveDo.Auth.UsersDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LiveDo.Auth.UsersDbContext.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    partial class AuthDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LiveDo.Auth.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("character varying(320)")
                        .HasMaxLength(320)
                        .IsUnicode(true);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id")
                        .HasName("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("AuthType").HasValue("User");
                });

            modelBuilder.Entity("LiveDo.Auth.Domain.Users.ExternalUser", b =>
                {
                    b.HasBaseType("LiveDo.Auth.Domain.Users.User");

                    b.HasDiscriminator().HasValue("external");
                });

            modelBuilder.Entity("LiveDo.Auth.Domain.Users.InternalUser", b =>
                {
                    b.HasBaseType("LiveDo.Auth.Domain.Users.User");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("character(32)")
                        .IsFixedLength(true)
                        .HasMaxLength(32);

                    b.HasDiscriminator().HasValue("internal");
                });

            modelBuilder.Entity("LiveDo.Auth.Domain.Users.User", b =>
                {
                    b.OwnsMany("LiveDo.Auth.Domain.Users.UserClaim", "Claims", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnName("Type")
                                .HasColumnType("text");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("Value")
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserClaim");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
